#pragma version 10

PuyaContracts.MIMC.contract.MIMC.approval_program:
    // src/PuyaContracts/MIMC/contract.py:21
    // class MIMC(ARC4Contract):
    method "create()void"
    method "initialize()void"
    method "multimimc7()void"
    method "verify_hash(byte[],byte[])void"
    txna ApplicationArgs 0
    match main_create_route@1 main_initialize_route@2 main_multimimc7_route@3 main_verify_hash_route@4
    err // reject transaction

main_create_route@1:
    // src/PuyaContracts/MIMC/contract.py:22
    // @arc4.abimethod(create="require")
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_initialize_route@2:
    // src/PuyaContracts/MIMC/contract.py:26
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub initialize
    int 1
    return

main_multimimc7_route@3:
    // src/PuyaContracts/MIMC/contract.py:47
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub multimimc7
    int 1
    return

main_verify_hash_route@4:
    // src/PuyaContracts/MIMC/contract.py:100
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // src/PuyaContracts/MIMC/contract.py:21
    // class MIMC(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // src/PuyaContracts/MIMC/contract.py:100
    // @arc4.abimethod()
    callsub verify_hash
    int 1
    return


// PuyaContracts.MIMC.contract.MIMC.initialize() -> void:
initialize:
    // src/PuyaContracts/MIMC/contract.py:26-27
    // @arc4.abimethod()
    // def initialize(self) -> None:
    proto 0 0
    // src/PuyaContracts/MIMC/contract.py:28-29
    // # Read data to hash from notes
    // gtxn_notes: Bytes = aggregate_gtxn_notes()
    callsub aggregate_gtxn_notes
    // src/PuyaContracts/MIMC/contract.py:32
    // mimc_payload.mimc_hash_preimage.bytes
    dup
    int 82
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    // src/PuyaContracts/MIMC/contract.py:31-33
    // mimc_hash_preimage: Bytes = decode_dynamic_bytes(
    //     mimc_payload.mimc_hash_preimage.bytes
    // )
    callsub decode_dynamic_bytes
    // src/PuyaContracts/MIMC/contract.py:34
    // sha256_id: Bytes = sha256(mimc_hash_preimage)
    dup
    sha256
    // src/PuyaContracts/MIMC/contract.py:36-37
    // # Set the r value
    // r_box = Box(BigUInt, key=concat(b"r", sha256_id))
    byte 0x72
    dig 1
    concat
    // src/PuyaContracts/MIMC/contract.py:38
    // r_box.value = BigUInt(0)
    dup
    box_del
    pop
    byte 0x
    box_put
    // src/PuyaContracts/MIMC/contract.py:40-41
    // # Set the counters
    // num_chunks_box = Box(UInt64, key=concat(b"num_chunks", sha256_id))
    byte 0x6e756d5f6368756e6b73
    dig 1
    concat
    // src/PuyaContracts/MIMC/contract.py:42
    // num_chunks_box.value = mimc_hash_preimage.length // 32
    uncover 2
    len
    int 32
    /
    itob
    box_put
    // src/PuyaContracts/MIMC/contract.py:44
    // num_completed_box = Box(UInt64, key=concat(b"num_completed", sha256_id))
    byte 0x6e756d5f636f6d706c65746564
    swap
    concat
    // src/PuyaContracts/MIMC/contract.py:45
    // num_completed_box.value = UInt64(0)
    int 0
    itob
    box_put
    retsub


// PuyaContracts.common.aggregate_gtxn_notes() -> bytes:
aggregate_gtxn_notes:
    // src/PuyaContracts/common.py:27-28
    // @subroutine
    // def aggregate_gtxn_notes() -> Bytes:
    proto 0 1
    // src/PuyaContracts/common.py:29
    // data: Bytes = Bytes(b"")
    byte 0x
    // src/PuyaContracts/common.py:30
    // group_size: UInt64 = Global.group_size
    global GroupSize
    // src/PuyaContracts/common.py:31
    // for i in urange(group_size):
    int 0

aggregate_gtxn_notes_for_header@1:
    // src/PuyaContracts/common.py:31
    // for i in urange(group_size):
    frame_dig 2
    frame_dig 1
    <
    bz aggregate_gtxn_notes_after_for@4
    // src/PuyaContracts/common.py:32
    // note: Bytes = gtxn.Transaction(i).note
    frame_dig 2
    dup
    gtxns Note
    // src/PuyaContracts/common.py:33
    // data += note
    frame_dig 0
    swap
    concat
    frame_bury 0
    // src/PuyaContracts/common.py:31
    // for i in urange(group_size):
    int 1
    +
    frame_bury 2
    b aggregate_gtxn_notes_for_header@1

aggregate_gtxn_notes_after_for@4:
    // src/PuyaContracts/common.py:34
    // return data
    retsub


// PuyaContracts.common.decode_dynamic_bytes(value: bytes) -> bytes:
decode_dynamic_bytes:
    // src/PuyaContracts/common.py:23-24
    // @subroutine
    // def decode_dynamic_bytes(value: Bytes) -> Bytes:
    proto 1 1
    // src/PuyaContracts/common.py:25
    // return substring(value, 2, value.length)
    frame_dig -1
    len
    frame_dig -1
    int 2
    uncover 2
    substring3
    retsub


// PuyaContracts.MIMC.contract.MIMC.multimimc7() -> void:
multimimc7:
    // src/PuyaContracts/MIMC/contract.py:47-48
    // @arc4.abimethod()
    // def multimimc7(self) -> None:
    proto 0 0
    // src/PuyaContracts/MIMC/contract.py:49
    // gtxn_notes: Bytes = aggregate_gtxn_notes()
    callsub aggregate_gtxn_notes
    // src/PuyaContracts/MIMC/contract.py:51
    // start_idx: UInt64 = btoi(mimc_payload.compute_start_idx.bytes)
    dup
    extract 64 8 // on error: Index access is out of bounds
    btoi
    swap
    // src/PuyaContracts/MIMC/contract.py:52
    // end_idx: UInt64 = btoi(mimc_payload.compute_end_idx.bytes)
    dup
    extract 72 8 // on error: Index access is out of bounds
    btoi
    cover 2
    // src/PuyaContracts/MIMC/contract.py:54
    // mimc_hash: Bytes = mimc_payload.mimc_hash.bytes
    dup
    extract 0 32 // on error: Index access is out of bounds
    cover 3
    // src/PuyaContracts/MIMC/contract.py:55-57
    // previous_r_value: BigUInt = BigUInt.from_bytes(
    //     mimc_payload.previous_r_value.bytes
    // )
    dup
    // src/PuyaContracts/MIMC/contract.py:56
    // mimc_payload.previous_r_value.bytes
    extract 32 32 // on error: Index access is out of bounds
    // src/PuyaContracts/MIMC/contract.py:55-57
    // previous_r_value: BigUInt = BigUInt.from_bytes(
    //     mimc_payload.previous_r_value.bytes
    // )
    swap
    // src/PuyaContracts/MIMC/contract.py:59
    // mimc_payload.mimc_hash_preimage.bytes
    dup
    int 82
    extract_uint16
    swap
    dup
    len
    swap
    cover 2
    substring3
    // src/PuyaContracts/MIMC/contract.py:58-60
    // mimc_hash_preimage: Bytes = decode_dynamic_bytes(
    //     mimc_payload.mimc_hash_preimage.bytes
    // )
    callsub decode_dynamic_bytes
    // src/PuyaContracts/MIMC/contract.py:61
    // sha256_id: Bytes = sha256(mimc_hash_preimage)
    sha256
    dup
    cover 5
    // src/PuyaContracts/MIMC/contract.py:63
    // num_chunks_box = Box(UInt64, key=concat(b"num_chunks", sha256_id))
    byte 0x6e756d5f6368756e6b73
    dig 1
    concat
    cover 2
    // src/PuyaContracts/MIMC/contract.py:65-66
    // # r value integrity
    // r_box = Box(BigUInt, key=concat(b"r", sha256_id))
    byte 0x72
    dig 1
    concat
    dup
    cover 7
    // src/PuyaContracts/MIMC/contract.py:69
    // previous_r_value == r_box.value
    dup
    box_get
    assert // check Box exists
    uncover 3
    b==
    // src/PuyaContracts/MIMC/contract.py:68-70
    // assert (
    //     previous_r_value == r_box.value
    // ), "Previous r value must match that previously computed last round"
    assert // Previous r value must match that previously computed last round
    // src/PuyaContracts/MIMC/contract.py:72-73
    // # start index integrity
    // num_completed_box = Box(UInt64, key=concat(b"num_completed", sha256_id))
    byte 0x6e756d5f636f6d706c65746564
    uncover 2
    concat
    // src/PuyaContracts/MIMC/contract.py:74
    // assert num_completed_box.value == start_idx, "Start index must be contiguous"
    dup
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    dig 4
    ==
    assert // Start index must be contiguous
    // src/PuyaContracts/MIMC/contract.py:76-77
    // # end indx integrity
    // assert start_idx < end_idx, "Start idx must be less than end idx"
    uncover 3
    dig 4
    <
    assert // Start idx must be less than end idx
    // src/PuyaContracts/MIMC/contract.py:78
    // assert end_idx <= num_chunks_box.value
    dig 2
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    dig 4
    >=
    assert
    // src/PuyaContracts/MIMC/contract.py:80-81
    // # Update r value
    // r_box.value = BigUInt.from_bytes(mimc_hash)
    dig 1
    box_del
    pop
    swap
    uncover 4
    box_put
    // src/PuyaContracts/MIMC/contract.py:83-84
    // # Update number of hashed chunks
    // num_completed_box.value = end_idx
    uncover 2
    itob
    dig 1
    swap
    box_put
    // src/PuyaContracts/MIMC/contract.py:86-87
    // # MIMC Hasher integrity
    // assert Global.group_size >= 2, "Must be at least 2 transactions in the group"
    global GroupSize
    int 2
    >=
    assert // Must be at least 2 transactions in the group
    // src/PuyaContracts/MIMC/contract.py:88
    // MIMC_HASHER_LSIG_ACCOUNT: Account = TemplateVar[Account]("MIMC_HASHER_ADDR")
    byte TMPL_MIMC_HASHER_ADDR
    // src/PuyaContracts/MIMC/contract.py:90
    // MIMC_HASHER_LSIG_TXN = gtxn.PaymentTransaction(1)
    int 1
    gtxns TypeEnum
    int pay
    ==
    assert // transaction type is pay
    int 1
    // src/PuyaContracts/MIMC/contract.py:92
    // MIMC_HASHER_LSIG_TXN.sender == MIMC_HASHER_LSIG_ACCOUNT
    gtxns Sender
    ==
    // src/PuyaContracts/MIMC/contract.py:91-93
    // assert (
    //     MIMC_HASHER_LSIG_TXN.sender == MIMC_HASHER_LSIG_ACCOUNT
    // ), "MIMC Hasher must have expected approval program (sender is hash of LSIG)"
    assert // MIMC Hasher must have expected approval program (sender is hash of LSIG)
    // src/PuyaContracts/MIMC/contract.py:95-96
    // # Record hash result once all chunks hashed
    // if num_completed_box.value >= num_chunks_box.value:
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    swap
    box_get
    swap
    btoi
    swap
    assert // check Box exists
    >=
    bz multimimc7_after_if_else@2
    // src/PuyaContracts/MIMC/contract.py:97
    // result_box = Box(Bytes, key=concat(b"result", sha256_id))
    byte 0x726573756c74
    frame_dig 0
    concat
    // src/PuyaContracts/MIMC/contract.py:98
    // result_box.value = r_box.value.bytes
    frame_dig 1
    box_get
    swap
    cover 2
    assert // check Box exists
    dup
    box_del
    pop
    swap
    box_put

multimimc7_after_if_else@2:
    retsub


// PuyaContracts.MIMC.contract.MIMC.verify_hash(data_sha256: bytes, data_mimc: bytes) -> void:
verify_hash:
    // src/PuyaContracts/MIMC/contract.py:100-101
    // @arc4.abimethod()
    // def verify_hash(self, data_sha256: Bytes, data_mimc: Bytes) -> None:
    proto 2 0
    // src/PuyaContracts/MIMC/contract.py:102-103
    // # Given sha256(data), assert data_mimc === mimc(data)
    // result_box = Box(Bytes, key=concat(b"result", data_sha256))
    byte 0x726573756c74
    frame_dig -2
    concat
    // src/PuyaContracts/MIMC/contract.py:104
    // assert result_box.value == data_mimc, "MIMC hash matches computed value"
    box_get
    assert // check Box exists
    frame_dig -1
    ==
    assert // MIMC hash matches computed value
    retsub
